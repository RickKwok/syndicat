#!/usr/bin/env node
"use strict"

var l = require('lodash');
var fs = require('fs');

var models = require('./models');
//require('./include/autoload');
var funcs = require('./include/functions');
var rssfuncs = require('./include/rssfuncs');
//var config = require('./config');
//require('./include/sanity_check');
// TODO: var version = require('./include/version');
/*
funcs.init_plugins();

var longopts = ["feeds",
      "feedbrowser",
      "daemon",
      "daemon-loop",
      "task:",
      "cleanup-tags",
      "quiet",
      "log:",
      "indexes",
      "pidlock:",
      "update-schema",
      "convert-filters",
      "force-update",
      "list-plugins",
      "help"];

// foreach pluginhost.getInstance().get_commands() as command => data {
//   longopts[] = command + "" + data['suffix'];
// }
*/

var yargs = require('yargs')
  .describe({
    'feeds':            'update feeds',
    //'feedbrowser':      'update feedbrowser',
    //'daemon':           'start single-process update daemon',
    //'task':             'create lockfile using given task id',
    //'cleanup-tags':     'perform tags table maintenance',
    //'quiet':            'don\'t output messages to stdout',
    //'log':              'log messages to FILE',
    //'indexes':          'recreate missing schema indexes',
    //'update-schema':    'update database schema',
    //'convert-filters':  'convert type1 filters to type2',
    //'force-update':     'force update of all feeds',
    //'list-plugins':     'list all available plugins',
    /* print "Plugin options:\n";

    foreach (PluginHost::getInstance()->get_commands() as $command => $data) {
      $args = $data['arghelp'];
      printf(" --%-19s - %s\n", "$command $args", $data["description"]);
    }*/
  })
  .help('help', 'show this help')
  .version(version.get_version())
  .usage("SyndiCat data update script.\n\nUsage: syndicat [OPTIONS]")
  .strict();

//var options = l.intersection(longopts, l.keys(yargs.argv));
var options = l.keys(yargs.arv);

if (options.length === 0 || l.contains(options, 'help')) {
  console.err(yargs.help());
  process.exit(1);
}

if ('feeds' in options) {
  rssfuncs.update_daemon_common();
  rssfuncs.housekeeping_common();
  //PluginHost.getInstance().run_hooks(PluginHost.HOOK_UPDATE_TASK, "hook_update_tasks", op);
}

/* TODO: lock should be in the database/kvstore instead of filesystem (in case of multi-node cluster)
funcs._debug('Lock: ' + lock_filename);

var lock_handle = funcs.make_lockfile(lock_filename);
var must_exit = false;

// Try to lock a file in order to avoid concurrent update.
if (!lock_handle) {
  console.error("error: Can't create lockfile (" + lock_filename + "). " +
    "Maybe another update process is already running.");
  process.exit(1);
}

//if ('force-update' in options) {
//  funcs._debug("marking all feeds as needing update...");
//  db.query("UPDATE ttrss_feeds SET last_update_started = '1970-01-01', last_updated = '1970-01-01'");
//}

fs.exists(global.LOCK_DIRECTORY + "/" + lock_filename, function(exists) {
  if (exists) {
    fs.close(lock_handle);
    fs.unlink(lock_filename);
  }
});
*/
